import React from 'react';
import Heading from "@/components/ui/Heading";
import CodeCard from "@/components/Cards/CodeCard";
import {Text} from "@/components/ui/Text";
import {List, ListItem} from "@/components/ui/List";
import DiagramCard from "@/components/Cards/DiagramCard";
import Code from "@/components/ui/Code";
import BaseCard from "@/components/Cards/BaseCard";

export default function Cours() {
    const chartMVCAvance = `
sequenceDiagram
    participant Utilisateur
    participant EntryPoint as Point d'entr√©e<br/>public/register.php
    participant Controller as UserController
    participant Service as UserService
    participant Repository as UserRepository
    participant DB as Base de donn√©es
    participant Email as EmailService
    participant Audit as AuditService
    participant View as Vue<br/>register.php

    Utilisateur->>EntryPoint: Requ√™te HTTP
    EntryPoint->>Controller: Instanciation du contr√¥leur
    Controller->>Service: Appelle le service UserService
    Service->>Repository: Utilise le UserRepository
    Repository->>DB: Acc√®s √† la base de donn√©es
    DB-->>Repository: R√©sultat de la requ√™te
    Repository-->>Service: Donn√©es r√©cup√©r√©es
    Service->>Email: Envoi d‚Äôun email
    Service->>Audit: Journalisation de l‚Äôaction
    Email-->>Service: Confirmation d‚Äôenvoi
    Audit-->>Service: Confirmation d‚Äôaudit
    Service-->>Controller: R√©sultat du traitement
    Controller->>View: Appelle la vue register.php
    View-->>Utilisateur: Retourne le HTML g√©n√©r√©
`;

    const chartSOLID = `
graph TD
    A[SOLID] --> B[S - Single Responsibility]
    A --> C[O - Open/Closed]
    A --> D[L - Liskov Substitution]
    A --> E[I - Interface Segregation]
    A --> F[D - Dependency Inversion]
    
    B --> B1[Une classe = une responsabilit√©]
    C --> C1[Ouvert √† l'extension<br/>Ferm√© √† la modification]
    D --> D1[Les sous-classes peuvent<br/>remplacer les classes parentes]
    E --> E1[Interfaces sp√©cifiques<br/>plut√¥t que g√©n√©rales]
    F --> F1[D√©pendre d'abstractions<br/>pas d'impl√©mentations]
`;

    return (
        <article>
            {/* Introduction */}
            <section>
                <Heading level={2}>Introduction</Heading>
                <Text className="leading-relaxed mb-4">
                    Dans ce cours, nous allons partir d&apos;un code <strong>r√©el et probl√©matique</strong> que
                    l&apos;on rencontre souvent dans les projets : un contr√¥leur qui fait tout. Nous allons le
                    refactorer √©tape par √©tape en appliquant les principes SOLID et en nous rapprochant
                    d&apos;une Clean Architecture.
                </Text>
                <Text className="leading-relaxed">
                    Chaque √©tape apportera une am√©lioration concr√®te : meilleure testabilit√©, r√©utilisabilit√©,
                    maintenabilit√©. Vous verrez comment transformer du &quot;spaghetti code&quot; en code professionnel.
                </Text>
            </section>

            {/* √âtape 0 : Le code probl√©matique */}
            <section>
                <Heading level={2}>
                    √âtape 0 : Le code probl√©matique (God Class)
                </Heading>

                <Heading level={3} className="text-lg font-bold text-red-800 mb-3">Code initial : Tous les probl√®mes r√©unis</Heading>
                <CodeCard language="php">
                    {`<?php
class UserController {
    public function register() {
        if ($_SERVER['REQUEST_METHOD'] === 'GET') {
            // üî¥ PROBL√àME 1 : HTML dans le contr√¥leur
            echo '<!DOCTYPE html>
<html>
<head>
    <title>Inscription</title>
</head>
<body>
    <h1>Cr√©er un compte</h1>
    <form method="POST" action="/register.php">
        <label>Email :</label><br>
        <input type="email" name="email" required><br><br>
        
        <label>Mot de passe :</label><br>
        <input type="password" name="password" required><br><br>
        
        <button type="submit">S\\'inscrire</button>
    </form>
</body>
</html>';
            return;
        }
        
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $email = $_POST['email'] ?? null;
            $password = $_POST['password'] ?? null;
            
            // üî¥ PROBL√àME 2 : Validation dans le contr√¥leur
            if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
                die("Email invalide");
            }
            
            if (strlen($password) < 8) {
                die("Mot de passe trop court");
            }
            
            // üî¥ PROBL√àME 3 : Acc√®s direct √† la DB dans le contr√¥leur
            $pdo = new PDO('mysql:host=localhost;dbname=test', 'root', '');
            $stmt = $pdo->prepare("SELECT COUNT(*) FROM users WHERE email = :email");
            $stmt->execute(['email' => $email]);
            $exists = $stmt->fetchColumn() > 0;
            
            if ($exists) {
                die("L'utilisateur existe d√©j√†");
            }
            
            // üî¥ PROBL√àME 4 : Logique m√©tier dans le contr√¥leur
            $hashedPassword = password_hash($password, PASSWORD_BCRYPT);
            
            // üî¥ PROBL√àME 5 : Encore de l'acc√®s DB
            $stmt = $pdo->prepare(
                "INSERT INTO users (email, password, created_at) 
                 VALUES (:email, :password, NOW())"
            );
            $stmt->execute([
                'email' => $email,
                'password' => $hashedPassword
            ]);
            
            // üî¥ PROBL√àME 6 : Envoi d'email dans le contr√¥leur
            $subject = "Bienvenue sur notre plateforme";
            $message = "Bonjour, merci de vous √™tre inscrit avec $email";
            mail($email, $subject, $message);
            
            // üî¥ PROBL√àME 7 : Logging dans un fichier dans le contr√¥leur
            file_put_contents(
                __DIR__ . "/logs.txt",
                date('Y-m-d H:i:s') . " - Nouvel utilisateur: $email\\n",
                FILE_APPEND
            );
            
            echo "<Heading level={2}>Utilisateur cr√©√© avec succ√®s !</Heading>";
        }
    }
}

$controller = new UserController();
$controller->register();`}</CodeCard>

                <Heading level={3} className="text-xl font-bold text-gray-900 mb-4">Probl√®mes identifi√©s</Heading>
                <List>
                    <ListItem>
                        <Text className="font-semibold text-gray-900">Violation du MVC</Text>
                        <Text className="text-sm">Le HTML est √©crit directement dans le contr√¥leur</Text>
                    </ListItem>
                    <ListItem>
                        <Text className="font-semibold text-gray-900">Violation du SRP (Single Responsibility)</Text>
                        <Text className="text-sm">Le contr√¥leur fait TOUT : validation, DB, email, logging...</Text>
                    </ListItem>
                    <ListItem>
                        <Text className="font-semibold text-gray-900">Impossible √† tester</Text>
                    </ListItem>
                    <ListItem>
                        <Text className="font-semibold text-gray-900">Couplage fort</Text>
                        <Text className="text-sm">PDO hardcod√©, fonction mail() native, impossible de changer</Text>
                    </ListItem>
                    <ListItem>
                        <Text className="font-semibold text-gray-900">Code non r√©utilisable</Text>
                        <Text className="text-sm">Impossible d&apos;utiliser cette logique dans une API ou un CLI</Text>
                    </ListItem>
                </List>
            </section>

            {/* √âtape 1 : S√©parer la Vue */}
            <section>
                <Heading level={2}>
                    √âtape 1 : S√©parer la Vue du Contr√¥leur
                </Heading>

                <Heading level={3}>Objectif</Heading>
                <Text className="text-blue-800">
                    Respecter le principe MVC de base : le contr√¥leur ne doit pas contenir de HTML.
                </Text>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                    <div>
                        <Heading level={4}>Contr√¥leur simplifi√©</Heading>
                        <CodeCard language="php" className="bg-gray-900 text-gray-100 p-4 rounded overflow-x-auto text-xs">
                            {`<?php
// app/controllers/UserController.php
require_once '../app/core/Controller.php';

class UserController extends Controller
{
    public function register(): void
    {
        if ($_SERVER['REQUEST_METHOD'] === 'GET') {
            // ‚úÖ D√©l√®gue l'affichage √† la vue
            $this->view('users/register', 
                        'Inscription');
            return;
        }
        
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $email = $_POST['email'] ?? null;
            $password = $_POST['password'] ?? null;
            
            // Validation
            if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
                $this->view('users/register', 
                    'Inscription', 
                    ['error' => 'Email invalide']
                );
                return;
            }
            
            if (strlen($password) < 8) {
                $this->view('users/register', 
                    'Inscription', 
                    ['error' => 'Mot de passe trop court']
                );
                return;
            }
            
            // ... reste du code
            
            $this->view('users/success', 
                'Succ√®s', 
                ['message' => 'Utilisateur cr√©√© !']
            );
        }
    }
}`}</CodeCard>
                    </div>

                    <div>
                        <Heading level={4}>Vue s√©par√©e</Heading>
                        <CodeCard language="php" className="bg-gray-900 text-gray-100 p-4 rounded overflow-x-auto text-xs">
                            {`<!-- app/views/users/register.php -->
<!DOCTYPE html>
<html>
<head>
    <title><?= $title ?></title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div class="container">
        <h1>Cr√©er un compte</h1>
        
        <?php if (isset($error)): ?>
            <div class="alert alert-error">
                <?= $error ?>
            </div>
        <?php endif; ?>
        
        <form method="POST" action="/register.php">
            <div class="form-group">
                <label>Email :</label>
                <input type="email" name="email" required>
            </div>
            
            <div class="form-group">
                <label>Mot de passe :</label>
                <input type="password" name="password" required>
            </div>
            
            <button type="submit" class="btn">S'inscrire</button>
        </form>
    </div>
</body>
</html>`}</CodeCard>
                    </div>
                </div>

                <Heading level={3}>Am√©liorations obtenues</Heading>
                <List>
                    <ListItem>S√©paration des responsabilit√©s : le contr√¥leur coordonne, la vue affiche</ListItem>
                    <ListItem>Le design peut √™tre modifi√© sans toucher au contr√¥leur</ListItem>
                    <ListItem>R√©utilisation du template possible pour d&apos;autres pages</ListItem>
                    <ListItem>Gestion des erreurs plus √©l√©gante</ListItem>
                </List>
            </section>

            {/* √âtape 2 : Extraire le Repository */}
            <section>
                <Heading level={2}>
                    √âtape 2 : Cr√©er un Repository pour l&apos;acc√®s aux donn√©es
                </Heading>

                <Heading level={3}>Objectif</Heading>
                <Text>
                    Respecter le <strong>Single Responsibility Principle</strong> : s√©parer l&apos;acc√®s aux donn√©es dans une classe d√©di√©e.
                </Text>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                    <div>
                        <Heading level={4}>Contr√¥leur simplifi√©</Heading>
                        <CodeCard language="php">
                            {`<?php
// app/controllers/UserController.php

class UserController extends Controller
{
    private UserRepository $userRepo;
    
    public function __construct(UserRepository $userRepo)
    {
        $this->userRepo = $userRepo;
    }
    
    public function register(): void
    {
        if ($_SERVER['REQUEST_METHOD'] === 'GET') {
            $this->view('users/register', 'Inscription');
            return;
        }
        
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $email = $_POST['email'] ?? null;
            $password = $_POST['password'] ?? null;
            
            // Validation...
            
            // ‚úÖ Utilise le repository
            if ($this->userRepo->existsByEmail($email)) {
                $this->view('users/register', 'Inscription', 
                    ['error' => "L'utilisateur existe d√©j√†"]
                );
                return;
            }
            
            $hashedPassword = password_hash($password, PASSWORD_BCRYPT);
            
            // ‚úÖ Utilise le repository
            $userId = $this->userRepo->create([
                'email' => $email,
                'password' => $hashedPassword
            ]);
            
            // Envoi email, logging...
            
            $this->view('users/success', 'Succ√®s', 
                ['message' => 'Utilisateur cr√©√© !']
            );
        }
    }
}`}</CodeCard>
                    </div>
                    <div>
                        <Heading level={4}>Repository cr√©√©</Heading>
                        <CodeCard language="php">
                            {`<?php
// app/repositories/UserRepository.php

class UserRepository
{
    private PDO $pdo;
    
    public function __construct(PDO $pdo)
    {
        $this->pdo = $pdo;
    }
    
    /**
     * V√©rifie si un utilisateur existe par email
     */
    public function existsByEmail(string $email): bool
    {
        $stmt = $this->pdo->prepare(
            "SELECT COUNT(*) FROM users WHERE email = :email"
        );
        $stmt->execute(['email' => $email]);
        return $stmt->fetchColumn() > 0;
    }
    
    /**
     * Cr√©e un nouvel utilisateur
     */
    public function create(array $data): int
    {
        $stmt = $this->pdo->prepare(
            "INSERT INTO users (email, password, created_at) 
             VALUES (:email, :password, NOW())"
        );
        
        $stmt->execute([
            'email' => $data['email'],
            'password' => $data['password']
        ]);
        
        return (int) $this->pdo->lastInsertId();
    }
    
    /**
     * R√©cup√®re un utilisateur par son ID
     */
    public function findById(int $id): ?array
    {
        $stmt = $this->pdo->prepare(
            "SELECT * FROM users WHERE id = :id"
        );
        $stmt->execute(['id' => $id]);
        $user = $stmt->fetch(PDO::FETCH_ASSOC);
        
        return $user ?: null;
    }
}`}</CodeCard>
                    </div>
                </div>


                <Heading level={3}>Am√©liorations obtenues</Heading>
                <List>
                    <ListItem><strong>Single Responsibility</strong> : le Repository g√®re UNIQUEMENT l&apos;acc√®s aux donn√©es</ListItem>
                    <ListItem>Requ√™tes SQL centralis√©es et r√©utilisables</ListItem>
                    <ListItem>Facilite les tests : on peut mocker le repository</ListItem>
                    <ListItem>Changement de DB plus facile (MySQL ‚Üí PostgreSQL)</ListItem>
                </List>

            </section>

            {/* √âtape 3 : Cr√©er les Services */}
            <section>
                <Heading level={2}>
                    √âtape 3 : Extraire la logique m√©tier dans des Services
                </Heading>

                <Heading level={3}>Objectif</Heading>
                <Text className="text-blue-800">
                    Cr√©er des services sp√©cialis√©s pour chaque responsabilit√© : validation, email, audit.
                    Cela respecte <strong>Single Responsibility</strong> et pr√©pare
                    l&apos;<strong>Inversion de D√©pendances</strong>.
                </Text>
                <Heading level={4}>1. Service de validation</Heading>
                <CodeCard language="php">
                    {`<?php
// app/services/ValidationService.php

class ValidationService
{
    /**
     * Valide un email
     * @throws ValidationException
     */
    public function validateEmail(string $email): void
    {
        if (empty($email)) {
            throw new ValidationException("L'email est requis");
        }
        
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            throw new ValidationException("L'email n'est pas valide");
        }
    }
    
    /**
     * Valide un mot de passe
     * @throws ValidationException
     */
    public function validatePassword(string $password): void
    {
        if (empty($password)) {
            throw new ValidationException("Le mot de passe est requis");
        }
        
        if (strlen($password) < 8) {
            throw new ValidationException(
                "Le mot de passe doit contenir au moins 8 caract√®res"
            );
        }
        
        if (!preg_match('/[A-Z]/', $password)) {
            throw new ValidationException(
                "Le mot de passe doit contenir au moins une majuscule"
            );
        }
        
        if (!preg_match('/[0-9]/', $password)) {
            throw new ValidationException(
                "Le mot de passe doit contenir au moins un chiffre"
            );
        }
    }
}`}</CodeCard>
                <Heading level={4}>2. Service d&apos;email</Heading>
                <CodeCard language="php">
                    {`<?php
// app/services/EmailService.php

class EmailService
{
    private string $fromEmail;
    private string $fromName;
    
    public function __construct(
        string $fromEmail = 'noreply@example.com',
        string $fromName = 'Mon Application'
    ) {
        $this->fromEmail = $fromEmail;
        $this->fromName = $fromName;
    }
    
    /**
     * Envoie un email de bienvenue
     */
    public function sendWelcomeEmail(string $toEmail): void
    {
        $subject = "Bienvenue sur notre plateforme";
        $message = "Bonjour,\\n\\n";
        $message .= "Merci de vous √™tre inscrit avec $toEmail.\\n";
        $message .= "Nous sommes ravis de vous compter parmi nous !\\n\\n";
        $message .= "L'√©quipe " . $this->fromName;
        
        $headers = [
            'From: ' . $this->fromName . ' <' . $this->fromEmail . '>',
            'Reply-To: ' . $this->fromEmail,
            'X-Mailer: PHP/' . phpversion(),
            'Content-Type: text/plain; charset=UTF-8'
        ];
        
        mail($toEmail, $subject, $message, implode("\\r\\n", $headers));
    }
}`}</CodeCard>
                <Heading level={4}>3. Service d&apos;audit</Heading>
                <CodeCard language="php">
                    {`<?php
// app/services/AuditService.php

class AuditService
{
    private string $logFile;
    
    public function __construct(string $logFile = null)
    {
        $this->logFile = $logFile ?? __DIR__ . '/../../logs/audit.log';
    }
    
    /**
     * Enregistre un √©v√©nement dans les logs
     */
    public function log(string $event, array $context = []): void
    {
        $timestamp = date('Y-m-d H:i:s');
        $contextStr = empty($context) ? '' : ' | ' . json_encode($context);
        $logEntry = "[$timestamp] $event$contextStr\\n";
        
        // Cr√©e le dossier si n√©cessaire
        $dir = dirname($this->logFile);
        if (!is_dir($dir)) {
            mkdir($dir, 0755, true);
        }
        
        file_put_contents($this->logFile, $logEntry, FILE_APPEND);
    }
    
    /**
     * Log sp√©cifique pour la cr√©ation d'utilisateur
     */
    public function logUserRegistration(string $email, int $userId): void
    {
        $this->log('USER_REGISTERED', [
            'email' => $email,
            'user_id' => $userId
        ]);
    }
}`}</CodeCard>
                <Heading level={4}>4. Service principal UserService</Heading>
                <CodeCard language="php">
                    {`<?php
// app/services/UserService.php

class UserService
{
    private UserRepository $userRepo;
    private ValidationService $validator;
    private EmailService $emailService;
    private AuditService $auditService;
    
    public function __construct(
        UserRepository $userRepo,
        ValidationService $validator,
        EmailService $emailService,
        AuditService $auditService
    ) {
        $this->userRepo = $userRepo;
        $this->validator = $validator;
        $this->emailService = $emailService;
        $this->auditService = $auditService;
    }
    
    /**
     * Enregistre un nouvel utilisateur
     * @throws ValidationException
     * @throws DomainException
     */
    public function register(string $email, string $password): int
    {
        // 1. Validation des donn√©es
        $this->validator->validateEmail($email);
        $this->validator->validatePassword($password);
        
        // 2. V√©rification unicit√©
        if ($this->userRepo->existsByEmail($email)) {
            throw new DomainException(
                "Un utilisateur avec cet email existe d√©j√†"
            );
        }
        
        // 3. Hash du mot de passe
        $hashedPassword = password_hash($password, PASSWORD_BCRYPT);
        
        // 4. Sauvegarde en base
        $userId = $this->userRepo->create([
            'email' => $email,
            'password' => $hashedPassword
        ]);
        
        // 5. Envoi de l'email de bienvenue
        $this->emailService->sendWelcomeEmail($email);
        
        // 6. Log de l'√©v√©nement
        $this->auditService->logUserRegistration($email, $userId);
        
        return $userId;
    }
}`}</CodeCard>
                <Heading level={4}>5. Contr√¥leur ultra-simplifi√©</Heading>
                <CodeCard language="php">
                    {`<?php
// app/controllers/UserController.php

class UserController extends Controller
{
    private UserService $userService;
    
    public function __construct(UserService $userService)
    {
        $this->userService = $userService;
    }
    
    public function register(): void
    {
        // Affichage du formulaire
        if ($_SERVER['REQUEST_METHOD'] === 'GET') {
            $this->view('users/register', 'Inscription');
            return;
        }
        
        // Traitement du formulaire
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $email = $_POST['email'] ?? '';
            $password = $_POST['password'] ?? '';
            
            try {
                // ‚úÖ Tout est d√©l√©gu√© au service
                $userId = $this->userService->register($email, $password);
                
                $this->view('users/success', 'Succ√®s', [
                    'message' => 'Votre compte a √©t√© cr√©√© avec succ√®s !'
                ]);
                
            } catch (ValidationException $e) {
                $this->view('users/register', 'Inscription', [
                    'error' => $e->getMessage(),
                    'old' => ['email' => $email]
                ]);
                
            } catch (DomainException $e) {
                $this->view('users/register', 'Inscription', [
                    'error' => $e->getMessage(),
                    'old' => ['email' => $email]
                ]);
                
            } catch (Exception $e) {
                $this->view('errors/500', 'Erreur serveur', [
                    'message' => 'Une erreur est survenue'
                ], 500);
            }
        }
    }
}`}</CodeCard>


                <Heading level={3}>Am√©liorations massives obtenues</Heading>
                <List className="space-y-2 text-green-800">
                    <ListItem><strong>Single Responsibility</strong> : chaque service a UNE responsabilit√©</ListItem>
                    <ListItem><strong>Testabilit√©</strong> : chaque service peut √™tre test√© ind√©pendamment</ListItem>
                    <ListItem><strong>R√©utilisabilit√©</strong> : ValidationService peut √™tre utilis√© partout</ListItem>
                    <ListItem><strong>Contr√¥leur ultra-l√©ger</strong> : seulement 40 lignes, facile √† comprendre</ListItem>
                    <ListItem><strong>Gestion d&apos;erreurs robuste</strong> : exceptions m√©tier sp√©cifiques</ListItem>
                </List>
            </section>

            {/* √âtape 4 : Interfaces et Dependency Inversion */}
            <section>
                <Heading level={2}>
                    √âtape 4 : Interfaces et Dependency Inversion (SOLID - D)
                </Heading>

                <Heading level={3}>Objectif</Heading>
                <Text>
                    Appliquer le principe <strong>Dependency Inversion</strong> : d√©pendre d&apos;abstractions
                    (interfaces) plut√¥t que d&apos;impl√©mentations concr√®tes. Cela rend le code flexible et
                    facilite les tests.
                </Text>
                <Text className="text-blue-800 font-semibold">
                    &quot;Les modules de haut niveau ne doivent pas d√©pendre des modules de bas niveau.
                    Les deux doivent d√©pendre d&apos;abstractions.&quot;
                </Text>


                <Heading level={4}>1. Interface pour l&apos;envoi d&apos;emails</Heading>
                <CodeCard language="php">
                    {`<?php
// app/interfaces/EmailSenderInterface.php

interface EmailSenderInterface
{
    /**
     * Envoie un email de bienvenue
     */
    public function sendWelcomeEmail(string $toEmail): void;
    
    /**
     * Envoie un email g√©n√©rique
     */
    public function send(string $to, string $subject, string $message): void;
}`}</CodeCard>

                <Heading level={4}>2. Impl√©mentation SMTP r√©elle</Heading>
                <CodeCard language="php">
                    {`<?php
// app/services/SmtpEmailService.php

class SmtpEmailService implements EmailSenderInterface
{
    private string $fromEmail;
    private string $fromName;
    
    public function __construct(
        string $fromEmail = 'noreply@example.com',
        string $fromName = 'Mon Application'
    ) {
        $this->fromEmail = $fromEmail;
        $this->fromName = $fromName;
    }
    
    public function sendWelcomeEmail(string $toEmail): void
    {
        $subject = "Bienvenue sur notre plateforme";
        $message = "Bonjour,\\n\\nMerci de vous √™tre inscrit !";
        
        $this->send($toEmail, $subject, $message);
    }
    
    public function send(string $to, string $subject, string $message): void
    {
        // Utilise la fonction mail() native PHP
        $headers = [
            'From: ' . $this->fromName . ' <' . $this->fromEmail . '>',
            'Content-Type: text/plain; charset=UTF-8'
        ];
        
        mail($to, $subject, $message, implode("\\r\\n", $headers));
    }
}`}</CodeCard>
                <Heading level={4}>3. Impl√©mentation FAKE pour les tests</Heading>
                <CodeCard language="php">
                    {`<?php
// app/services/FakeEmailService.php

class FakeEmailService implements EmailSenderInterface
{
    private array $sentEmails = [];
    
    public function sendWelcomeEmail(string $toEmail): void
    {
        $this->send($toEmail, "Bienvenue", "Message de bienvenue");
    }
    
    public function send(string $to, string $subject, string $message): void
    {
        // N'envoie pas r√©ellement, stocke juste en m√©moire
        $this->sentEmails[] = [
            'to' => $to,
            'subject' => $subject,
            'message' => $message,
            'sent_at' => date('Y-m-d H:i:s')
        ];
    }
    
    /**
     * M√©thode pour les tests : v√©rifier qu'un email a √©t√© envoy√©
     */
    public function hasEmailBeenSent(string $to): bool
    {
        foreach ($this->sentEmails as $email) {
            if ($email['to'] === $to) {
                return true;
            }
        }
        return false;
    }
    
    public function getSentEmails(): array
    {
        return $this->sentEmails;
    }
}`}</CodeCard>

                <Heading level={4}>4. UserService modifi√© pour utiliser l&apos;interface</Heading>
                <CodeCard language="php">
                    {`<?php
// app/services/UserService.php

class UserService
{
    private UserRepository $userRepo;
    private ValidationService $validator;
    private EmailSenderInterface $emailSender;  // ‚úÖ Interface, pas impl√©mentation
    private AuditService $auditService;
    
    public function __construct(
        UserRepository $userRepo,
        ValidationService $validator,
        EmailSenderInterface $emailSender,  // ‚úÖ On accepte n'importe quelle impl√©mentation
        AuditService $auditService
    ) {
        $this->userRepo = $userRepo;
        $this->validator = $validator;
        $this->emailSender = $emailSender;
        $this->auditService = $auditService;
    }
    
    public function register(string $email, string $password): int
    {
        $this->validator->validateEmail($email);
        $this->validator->validatePassword($password);
        
        if ($this->userRepo->existsByEmail($email)) {
            throw new DomainException("Utilisateur existant");
        }
        
        $hashedPassword = password_hash($password, PASSWORD_BCRYPT);
        $userId = $this->userRepo->create([
            'email' => $email,
            'password' => $hashedPassword
        ]);
        
        // ‚úÖ Le service ne sait pas quelle impl√©mentation est utilis√©e
        $this->emailSender->sendWelcomeEmail($email);
        
        $this->auditService->logUserRegistration($email, $userId);
        
        return $userId;
    }
}`}</CodeCard>

                <Heading level={4}>5. Point d&apos;entr√©e avec choix d&apos;impl√©mentation</Heading>
                <CodeCard language="php">
                    {`<?php
// public/register.php

require_once '../config/database.php';
require_once '../app/repositories/UserRepository.php';
require_once '../app/services/ValidationService.php';
require_once '../app/interfaces/EmailSenderInterface.php';
require_once '../app/services/SmtpEmailService.php';
require_once '../app/services/FakeEmailService.php';
require_once '../app/services/AuditService.php';
require_once '../app/services/UserService.php';
require_once '../app/controllers/UserController.php';

// Configuration de la connexion
$pdo = getDatabase();

// ‚úÖ En PRODUCTION : utilise le vrai service SMTP
$emailService = new SmtpEmailService();

// ‚úÖ En DEV/TEST : on pourrait utiliser le fake
// $emailService = new FakeEmailService();

// Injection des d√©pendances
$userRepo = new UserRepository($pdo);
$validator = new ValidationService();
$auditService = new AuditService();

$userService = new UserService(
    $userRepo,
    $validator,
    $emailService,    // ‚úÖ N'importe quelle impl√©mentation d'EmailSenderInterface
    $auditService
);

$controller = new UserController($userService);
$controller->register();`}</CodeCard>



                <Heading level={3}>Avantages du Dependency Inversion</Heading>
                <List>
                    <ListItem><strong>Flexibilit√©</strong> : on peut changer d&apos;impl√©mentation sans toucher UserService</ListItem>
                    <ListItem><strong>Tests facilit√©s</strong> : on peut injecter FakeEmailService dans les tests</ListItem>
                    <ListItem><strong>D√©couplage</strong> : UserService ne d√©pend plus d&apos;une classe concr√®te</ListItem>
                    <ListItem><strong>Open/Closed</strong> : ouvert √† l&apos;extension (nouvelles impl√©mentations), ferm√© √† la modification</ListItem>
                </List>

                <Heading level={4}>Exemple de test unitaire</Heading>
                <CodeCard language="php" className="bg-gray-900 text-gray-100 p-3 rounded overflow-x-auto text-xs">
                    {`<?php
// tests/UserServiceTest.php

class UserServiceTest extends TestCase
{
    public function testUserRegistrationSendsEmail()
    {
        // Arrange : on utilise le FakeEmailService
        $pdo = $this->createMockPDO();
        $userRepo = new UserRepository($pdo);
        $validator = new ValidationService();
        $fakeEmailService = new FakeEmailService();  // ‚úÖ Fake pour tester
        $auditService = new AuditService();
        
        $userService = new UserService(
            $userRepo, 
            $validator, 
            $fakeEmailService,  // ‚úÖ Injection du fake
            $auditService
        );
        
        // Act
        $userService->register('test@example.com', 'Password123');
        
        // Assert
        $this->assertTrue(
            $fakeEmailService->hasEmailBeenSent('test@example.com')
        );
    }
}`}</CodeCard>
            </section>

            {/* √âtape 5 : Architecture en couches */}
            <section>
                <Heading level={2}>Vision Clean Architecture</Heading>

                <Heading level={3}>Objectif</Heading>
                <Text className="text-blue-800">
                    Comprendre comment notre refactoring s&apos;inscrit dans une <strong>Clean Architecture</strong> o√π les d√©pendances pointent toujours vers le c≈ìur m√©tier.
                </Text>

                <DiagramCard chart={chartMVCAvance}/>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-5">
                    <BaseCard
                        header={<Text className="text-white">Couche Domaine (C≈ìur)</Text>}
                        withLed={false}
                        withHover={false}
                        content={<> <Text className="text-sm">
                            Contient la logique m√©tier pure, ind√©pendante de toute infrastructure
                        </Text>
                            <List>
                                <ListItem><Code>User</Code> (entit√©)</ListItem>
                                <ListItem><Code>ValidationService</Code></ListItem>
                                <ListItem><Code>UserService</Code></ListItem>
                                <ListItem>Exceptions m√©tier</ListItem>
                            </List>
                            <Text className="text-xs text-yellow-700 mt-3 italic">
                                Aucune d√©pendance externe (DB, framework, etc.)
                            </Text></>}/>

                    <BaseCard
                        header={<Text className="text-white">Couche Application</Text>}
                        withLed={false}
                        withHover={false}
                        content={<> <Text className="text-sm">
                            Orchestre les cas d&apos;usage en coordonnant le domaine
                        </Text>
                            <List>
                                <ListItem><Code>UserService</Code></ListItem>
                                <ListItem>Interfaces (ports)</ListItem>
                                <ListItem>DTOs si n√©cessaire</ListItem>
                            </List>
                            <Text className="text-xs text-yellow-700 mt-3 italic">
                                D√©finit les interfaces, ne d√©pend pas des impl√©mentations
                            </Text></>}/>

                    <BaseCard
                        header={<Text className="text-white">Couche Infrastructure</Text>}
                        withLed={false}
                        withHover={false}
                        content={<> <Text className="text-sm">
                            Impl√©mente les d√©tails techniques (DB, email, logs)
                        </Text>
                            <List>
                                <ListItem><Code>UserRepository</Code></ListItem>
                                <ListItem><Code>SmtpEmailService</Code></ListItem>
                                <ListItem><Code>AuditService</Code></ListItem>
                                <ListItem>Configuration DB</ListItem>
                            </List>
                            <Text className="text-xs text-yellow-700 mt-3 italic">
                                D√©pend des interfaces du domaine
                            </Text></>}/>

                    <BaseCard
                        header={<Text className="text-white"> Couche Pr√©sentation</Text>}
                        withLed={false}
                        withHover={false}
                        content={<> <Text className="text-sm">
                            G√®re l&apos;interaction avec l&apos;utilisateur (HTTP, CLI, API)
                        </Text>
                            <List>
                                <ListItem><Code>UserController</Code></ListItem>
                                <ListItem>Vues (templates)</ListItem>
                                <ListItem>Routes</ListItem>
                                <ListItem>Validation formulaires</ListItem>
                            </List>
                            <Text className="text-xs text-yellow-700 mt-3 italic">
                                D√©pend de la couche Application
                            </Text></>}/>
                </div>

                <Heading level={4} className="mt-5">Principe fondamental de Clean Architecture</Heading>
                <List>
                    <ListItem>
                        <span>Les <strong>d√©pendances pointent toujours vers l&apos;int√©rieur</strong> (vers le domaine)</span>
                    </ListItem>
                    <ListItem>
                        <span>Le <strong>c≈ìur m√©tier ne conna√Æt RIEN</strong> de l&apos;infrastructure</span>
                    </ListItem>
                    <ListItem>
                        <span>On peut <strong>changer la DB, le framework, l&apos;UI</strong> sans toucher au m√©tier</span>
                    </ListItem>
                    <ListItem>
                        <span>Les <strong>tests du domaine</strong> sont ind√©pendants de toute infrastructure</span>
                    </ListItem>
                </List>
            </section>

            {/* R√©capitulatif SOLID */}
            <section className="px-4 md:px-8 lg:px-16 py-8">
                <Heading level={2} className="text-2xl md:text-3xl font-bold mb-6 text-center">
                    R√©capitulatif : Application des principes SOLID
                </Heading>

                <div className="mb-8">
                    <DiagramCard chart={chartSOLID} />
                </div>

                {/* Conteneur responsive */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-8">
                    {/* S - Single Responsibility */}
                    <div className="p-4 md:p-6 border-php border-2 rounded-lg">
                        <Heading level={3}>S - Single Responsibility</Heading>
                        <Text className="mb-3">
                            <strong>Appliqu√©</strong> : Chaque classe a une seule responsabilit√©
                        </Text>
                        <List className="text-sm space-y-1">
                            <ListItem><Code>UserController</Code> : g√®re HTTP uniquement</ListItem>
                            <ListItem><Code>UserService</Code> : logique m√©tier d‚Äôinscription</ListItem>
                            <ListItem><Code>ValidationService</Code> : validation uniquement</ListItem>
                            <ListItem><Code>UserRepository</Code> : acc√®s donn√©es uniquement</ListItem>
                            <ListItem><Code>EmailService</Code> : envoi emails uniquement</ListItem>
                            <ListItem><Code>AuditService</Code> : logging uniquement</ListItem>
                        </List>
                    </div>

                    {/* O - Open/Closed */}
                    <div className="p-4 md:p-6 border-php border-2 rounded-lg">
                        <Heading level={3}>O - Open/Closed</Heading>
                        <Text className="mb-3">
                            <strong>Appliqu√©</strong> : Ouvert √† l‚Äôextension, ferm√© √† la modification
                        </Text>
                        <List className="text-sm space-y-1">
                            <ListItem>On peut ajouter <Code>MailgunEmailService</Code> sans modifier le code existant</ListItem>
                            <ListItem>On peut ajouter <Code>DatabaseAuditService</Code> sans toucher <Code>UserService</Code></ListItem>
                            <ListItem>Les interfaces permettent l‚Äôextensibilit√©</ListItem>
                        </List>
                    </div>

                    {/* L - Liskov Substitution */}
                    <div className="p-4 md:p-6 border-php border-2 rounded-lg">
                        <Heading level={3}>L - Liskov Substitution</Heading>
                        <Text className="mb-3">
                            <strong>Appliqu√©</strong> : Les impl√©mentations sont interchangeables
                        </Text>
                        <List className="text-sm space-y-1">
                            <ListItem><Code>FakeEmailService</Code> peut remplacer <Code>SmtpEmailService</Code></ListItem>
                            <ListItem>Le comportement respecte le contrat de l‚Äôinterface</ListItem>
                            <ListItem>Aucune surprise lors du remplacement</ListItem>
                        </List>
                    </div>

                    {/* I - Interface Segregation */}
                    <div className="p-4 md:p-6 border-php border-2 rounded-lg">
                        <Heading level={3}>I - Interface Segregation</Heading>
                        <Text className="mb-3">
                            <strong>Appliqu√©</strong> : Interfaces sp√©cifiques et cibl√©es
                        </Text>
                        <List className="text-sm space-y-1">
                            <ListItem><Code>EmailSenderInterface</Code> : uniquement l‚Äôenvoi d‚Äôemails</ListItem>
                            <ListItem>Pas d‚Äôinterface &quot;fourre-tout&quot; avec 20 m√©thodes</ListItem>
                            <ListItem>Chaque impl√©mentation n‚Äôa que ce dont elle a besoin</ListItem>
                        </List>
                    </div>

                    {/* D - Dependency Inversion */}
                    <div className="p-4 md:p-6 border-php border-2 rounded-lg">
                        <Heading level={3}>D- Dependency Inversion</Heading>
                        <Text className="mb-3">
                            <strong>Appliqu√©</strong> : D√©pendance sur abstractions, pas sur impl√©mentations
                        </Text>
                        <List className="text-sm space-y-1">
                            <ListItem><Code>UserService</Code> d√©pend de <Code>EmailSenderInterface</Code>, pas de <Code>SmtpEmailService</Code></ListItem>
                            <ListItem>Injection de d√©pendances dans les constructeurs</ListItem>
                            <ListItem>Couplage faible, flexibilit√© maximale</ListItem>
                        </List>
                    </div>

                </div>
            </section>

            {/* Comparaison avant/apr√®s */}
            <section>
                <Heading level={2}>
                    Comparaison : Avant vs Apr√®s
                </Heading>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <Heading level={3} className="text-xl font-bold text-red-900 mb-4">AVANT (Code initial)</Heading>
                        <List className="space-y-3">
                            <ListItem className="flex items-start">
                                <span className="mr-2">‚Ä¢</span>
                                <span><strong>1 fichier</strong> de 120 lignes</span>
                            </ListItem>
                            <ListItem className="flex items-start">
                                <span className="mr-2">‚Ä¢</span>
                                <span><strong>0 tests</strong> possibles</span>
                            </ListItem>
                            <ListItem className="flex items-start">
                                <span className="mr-2">‚Ä¢</span>
                                <span><strong>0 r√©utilisabilit√©</strong></span>
                            </ListItem>
                            <ListItem className="flex items-start">
                                <span className="mr-2">‚Ä¢</span>
                                <span><strong>HTML</strong> dans le contr√¥leur</span>
                            </ListItem>
                            <ListItem className="flex items-start">
                                <span className="mr-2">‚Ä¢</span>
                                <span><strong>SQL</strong> dans le contr√¥leur</span>
                            </ListItem>
                            <ListItem className="flex items-start">
                                <span className="mr-2">‚Ä¢</span>
                                <span><strong>Logique m√©tier</strong> dans le contr√¥leur</span>
                            </ListItem>
                            <ListItem className="flex items-start">
                                <span className="mr-2">‚Ä¢</span>
                                <span><strong>Email</strong> dans le contr√¥leur</span>
                            </ListItem>
                            <ListItem className="flex items-start">
                                <span className="mr-2">‚Ä¢</span>
                                <span><strong>Logs</strong> dans le contr√¥leur</span>
                            </ListItem>
                            <ListItem className="flex items-start">
                                <span className="mr-2">‚Ä¢</span>
                                <span>Modification = <strong>risque de tout casser</strong></span>
                            </ListItem>
                        </List>
                    </div>

                    <div>
                        <Heading level={3} className="text-xl font-bold text-green-900 mb-4">APR√àS (Architecture propre)</Heading>
                        <List className="space-y-3">
                            <ListItem className="flex items-start">
                                <span className="mr-2">‚Ä¢</span>
                                <span><strong>10 fichiers</strong> bien organis√©s</span>
                            </ListItem>
                            <ListItem className="flex items-start">
                                <span className="mr-2">‚Ä¢</span>
                                <span><strong>Tests unitaires</strong> possibles partout</span>
                            </ListItem>
                            <ListItem className="flex items-start">
                                <span className="mr-2">‚Ä¢</span>
                                <span><strong>R√©utilisabilit√©</strong> totale (API, CLI, Web)</span>
                            </ListItem>
                            <ListItem className="flex items-start">
                                <span className="mr-2">‚Ä¢</span>
                                <span><strong>HTML</strong> dans les vues</span>
                            </ListItem>
                            <ListItem className="flex items-start">
                                <span className="mr-2">‚Ä¢</span>
                                <span><strong>SQL</strong> dans le repository</span>
                            </ListItem>
                            <ListItem className="flex items-start">
                                <span className="mr-2">‚Ä¢</span>
                                <span><strong>Logique m√©tier</strong> dans UserService</span>
                            </ListItem>
                            <ListItem className="flex items-start">
                                <span className="mr-2">‚Ä¢</span>
                                <span><strong>Email</strong> dans EmailService</span>
                            </ListItem>
                            <ListItem className="flex items-start">
                                <span className="mr-2">‚Ä¢</span>
                                <span><strong>Logs</strong> dans AuditService</span>
                            </ListItem>
                            <ListItem className="flex items-start">
                                <span className="mr-2">‚Ä¢</span>
                                <span>Modification = <strong>impact limit√© et contr√¥l√©</strong></span>
                            </ListItem>
                        </List>
                    </div>
                </div>
            </section>

            {/* Organisation finale */}
            <section>
                <Heading level={2}>
                    Organisation finale du projet
                </Heading>

                <CodeCard language="php">
                    {`project_tp/
 ‚îÇ
 ‚îú‚îÄ‚îÄ public/                           ‚Üê Seul dossier accessible
 ‚îÇ   ‚îú‚îÄ‚îÄ register.php                  ‚Üê Point d'entr√©e
 ‚îÇ   ‚îî‚îÄ‚îÄ css/style.css
 ‚îÇ
 ‚îú‚îÄ‚îÄ app/
 ‚îÇ   ‚îÇ
 ‚îÇ   ‚îú‚îÄ‚îÄ controllers/                  ‚Üê Couche Pr√©sentation
 ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ UserController.php        (40 lignes, ultra-simple)
 ‚îÇ   ‚îÇ
 ‚îÇ   ‚îú‚îÄ‚îÄ services/                     ‚Üê Couche Application + Domaine
 ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ UserService.php           (logique m√©tier principale)
 ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ValidationService.php     (validation des r√®gles)
 ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SmtpEmailService.php      (impl√©mentation email r√©elle)
 ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FakeEmailService.php      (impl√©mentation pour tests)
 ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ AuditService.php          (logging)
 ‚îÇ   ‚îÇ
 ‚îÇ   ‚îú‚îÄ‚îÄ repositories/                 ‚Üê Couche Infrastructure (Donn√©es)
 ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ UserRepository.php
 ‚îÇ   ‚îÇ
 ‚îÇ   ‚îú‚îÄ‚îÄ entities/                     ‚Üê Couche Domaine (Objets m√©tier)
 ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ User.php
 ‚îÇ   ‚îÇ
 ‚îÇ   ‚îú‚îÄ‚îÄ interfaces/                   ‚Üê Contrats (Dependency Inversion)
 ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ EmailSenderInterface.php
 ‚îÇ   ‚îÇ
 ‚îÇ   ‚îú‚îÄ‚îÄ exceptions/                   ‚Üê Exceptions m√©tier
 ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ValidationException.php
 ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DomainException.php
 ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ NotFoundException.php
 ‚îÇ   ‚îÇ
 ‚îÇ   ‚îú‚îÄ‚îÄ views/                        ‚Üê Templates d'affichage
 ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ users/
 ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ register.php
 ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ success.php
 ‚îÇ   ‚îÇ
 ‚îÇ   ‚îî‚îÄ‚îÄ core/                         ‚Üê Classes de base
 ‚îÇ       ‚îî‚îÄ‚îÄ Controller.php
 ‚îÇ
 ‚îú‚îÄ‚îÄ config/
 ‚îÇ   ‚îî‚îÄ‚îÄ database.php                  ‚Üê Configuration
 ‚îÇ
 ‚îú‚îÄ‚îÄ logs/
 ‚îÇ   ‚îî‚îÄ‚îÄ audit.log                     ‚Üê Fichiers de log
 ‚îÇ
 ‚îî‚îÄ‚îÄ tests/                            ‚Üê Tests unitaires
     ‚îî‚îÄ‚îÄ UserServiceTest.php`}</CodeCard>

                <div>
                    <Heading level={3} className="font-bold text-blue-900 mb-3">Avantages de cette structure</Heading>
                    <List>
                        <ListItem><strong>S√©paration claire</strong> des responsabilit√©s par dossier</ListItem>
                        <ListItem><strong>Navigabilit√©</strong> : on sait imm√©diatement o√π chercher</ListItem>
                        <ListItem><strong>√âvolutivit√©</strong> : facile d&apos;ajouter de nouvelles fonctionnalit√©s</ListItem>
                        <ListItem><strong>Testabilit√©</strong> : chaque composant peut √™tre test√© isol√©ment</ListItem>
                        <ListItem><strong>Collaboration</strong> : plusieurs d√©veloppeurs peuvent travailler en parall√®le</ListItem>
                    </List>
                </div>
            </section>
        </article>
    );
}